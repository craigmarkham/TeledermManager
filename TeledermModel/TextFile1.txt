using System;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Security.Permissions;
using Microsoft.Win32.SafeHandles;
using System.Runtime.ConstrainedExecution;
using System.Security;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Data;

namespace Authentication {    
 public class Repository    {
         [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)] 
  public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword, int dwLogonType, int dwLogonProvider, out SafeTokenHandle phToken);

         [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
         public extern static bool CloseHandle(IntPtr handle);

         [PermissionSetAttribute(SecurityAction.Demand, Name = "FullTrust")]
         public Repository() { }

         public void sqlServerConnect()        
  {
             SafeTokenHandle safeTokenHandle;
             try  { 
                const int LOGON32_PROVIDER_DEFAULT = 0;
                const int LOGON32_LOGON_NEW_CREDENTIALS = 9;
                       bool impersonated = LogonUser("NWIC_Telederm_App", "vha.med.va.gov", "password", LOGON32_LOGON_NEW_CREDENTIALS, LOGON32_PROVIDER_DEFAULT, out safeTokenHandle);
                if (impersonated == false)
                {
                     int errorCode = Marshal.GetLastWin32Error();
                            System.Console.WriteLine("LogonUser() failed: " + errorCode);
                            return;
                       }
                       using (safeTokenHandle)
                       {
                          WindowsIdentity newId = new WindowsIdentity(safeTokenHandle.DangerousGetHandle());
                          using (WindowsImpersonationContext impersonatedUser = newId.Impersonate())
                          {
                              string connectionString = "Server=vhacdwa01.vha.med.va.gov;Database=NWIC_Telederm;Integrated Security=SSPI;Persist Security Info=True;";
                              string sqlText = "Select * from App.MyView where …";
                              using (SqlConnection myConnection = new SqlConnection(connectionString))
                              {
                                 myConnection.Open();
                                 using (SqlCommand command = new SqlCommand(sqlText, myConnection))
                                 {
                                    command.CommandType = CommandType.Text;
                                    SqlDataReader rdr = command.ExecuteReader();
                                    if (rdr.HasRows)
                                    {
                                        while (rdr.Read())
                                            Console.WriteLine(rdr.GetString(1));
                                    } else 
       		         Console.WriteLine("no rows returned");
                                    rdr.Close();
                                 }
                              }
                          }
                       }
                    }  catch (Exception e) {
                       System.Console.WriteLine(e.Message);
                       return;
                    }
                 }
             }

             public sealed class SafeTokenHandle : SafeHandleZeroOrMinusOneIsInvalid
             {
                private SafeTokenHandle() : base(true) {        }
                [DllImport("kernel32.dll")]
                [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
                [SuppressUnmanagedCodeSecurity]
                [return: MarshalAs(UnmanagedType.Bool)]
                private static extern bool CloseHandle(IntPtr handle);
                protected override bool ReleaseHandle()
                {
                   return CloseHandle(handle);
                }
            }
          }
